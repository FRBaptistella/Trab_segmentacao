import java.util.ArrayList;
import java.util.Collections;
void setup() {
  size(600, 480);
  noLoop();
}

void draw() {
  PImage[] images = new PImage[6];
  images[0] = loadImage("bikeREDbrilhoLIMI.jpg");
  images[1] = loadImage("bikeBLUEbrilhoMEDIA2.jpg");
  images[2] = loadImage("bikeBLUEbrilhoMEDIALIMI.jpg");
  images[3] = loadImage("bikeGREENbrilhoLIMI.jpg");
  images[4] = loadImage("bikeGREENlimea.jpg");
  images[5] = loadImage("bikemedialimea.jpg");
  
  float[][] img = new float [images[0].width][images[0].height];
  PImage aux = createImage(images[0].width, images[0].height, RGB);
//PImage não deixa passar de 255, por isso a matriz de float - as imagens são iguais

  for (int y = 0; y < aux.height; y++) {
    for (int x = 0; x < aux.width; x++) {
      int pos = y*aux.width + x;

      img[x][y] = (red(images[0].pixels[pos]) + 
      red(images[1].pixels[pos]) +
      red(images[2].pixels[pos]) +
      red(images[3].pixels[pos]) +
      red(images[4].pixels[pos]) +
      red(images[5].pixels[pos]));
    }
  }

  float maior = img[0][0];
  float menor = img[0][0];

  // Encontrar o maior e menor valor da imagem.
  for (int y = 0; y < aux.height; y++) {
    for (int x = 0; x < aux.width; x++) {
      if (img[x][y] > maior) {
        maior = img[x][y];
      } else if (img[x][y] < menor) {
        menor = img[x][y];
      }
    }
  }
  
  // Reescalonamento dos valores para [0,255].
  for (int y = 0; y < aux.height; y++) {
    for (int x = 0; x < aux.width; x++) {
      int pos = y*aux.width + x;
      int valor = (int) map(img[x][y],menor,maior,0,255);
      aux.pixels[pos] = color(valor);
      
    }

  }


 
  //for (int y = 0; y < aux.height; y++) {
  //  for (int x = 0; x < aux.width; x++){
  //    int pos = y*aux.width + x;
  //    int media = 0, qtde = 0;
      
  //    if (y!=0) {
  //      int npos = (y-1)*aux.width+x;
  //      media += (int)red(aux.pixels[npos]);
  //      qtde++;
  //    }
      
  //    if (y!=(aux.height-1)) {
  //      int npos = (y+1)*aux.width+x;
  //      media += (int) red(aux.pixels[npos]);
  //      qtde ++;
  //    }
      
  //    if (x!=0) {
  //      int npos = y*aux.width + (x-1);
  //      media += (int) red(aux.pixels[npos]);
  //      qtde++;
  //    }
      
  //    if (x != (aux.width-1)) {
  //      int npos = y*aux.width + (x+1);
  //      media += (int) red(aux.pixels[npos]);
  //      qtde++;
  //    }
      
  //    media = (int)(media + red(aux.pixels[pos])) / ++qtde;
  //    aux.pixels[pos] = color(media);
        
  
  //  }
    
  //}
  // Filtro de Mediana
  for (int y = 0; y < aux.height; y++) {
    for (int x = 0; x < aux.width; x++) {
      int jan = 1;
      int pos = y*aux.width + x;
      ArrayList<Integer> valores = new ArrayList();

      // Percorrer a janela
      for (int i = jan*(-1); i <= jan; i++) {
        for (int j = jan*(-1); j <= jan; j++) {
          int ny = y+i;
          int nx = x+j;
          if (ny >= 0 && ny < aux.height &&
            nx >= 0 && nx < aux.width) {
            int pos_aux = ny * aux.width + nx;
            valores.add((int)(red(aux.pixels[pos_aux])));
          }
        }
      }
      // Calculo da Mediana
      Collections.sort(valores);
      aux.pixels[pos]=color(valores.get(valores.size()/2));
          }
  }
    
 


  image(aux, 0, 0);
  //save("imgGerada.jpg");
  //save("imgGerada2.jpg");
  save("imgGerada17.jpg");
}
    
 